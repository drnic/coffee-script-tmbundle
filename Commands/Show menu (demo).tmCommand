<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env coffee
sys:        require('sys')
dialog_cmd: process.env['DIALOG']
  
# Displays a TextMate menu for selection and returns that selection (or index to it)
# Usage:
#   menu ['Option 1', null, 'Option 2', 'Options 3']
#   example result: 'Options 2'
#
#   menu [{title: 'Option 1'}, {separator: 1}, {title: 'Option 2'}]
#   example result: 0
menu: (options) -&gt;
  return nil unless options?
  
  return_hash: true
  if typeof options[0] == 'string'
    return_hash: false
    options: options.map (e) -&gt;
      if e?
        {title: e}
      else
        {separator: 1}

  menuDict: options.map((option) -&gt;
    if option.title
      "&lt;dict&gt;&lt;key&gt;title&lt;/key&gt;&lt;string&gt;${option.title}&lt;/string&gt;&lt;/dict&gt;"
    else
      "&lt;dict&gt;&lt;key&gt;separator&lt;/key&gt;&lt;integer&gt;1&lt;/integer&gt;&lt;/dict&gt;"
    ).join()
  menuItems: "
    &lt;?xml version='1.0' encoding='UTF-8'?&gt;
    &lt;!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'&gt;
    &lt;plist version='1.0'&gt;
    &lt;dict&gt;
      &lt;key&gt;menuItems&lt;/key&gt;
      &lt;array&gt;${menuDict}&lt;/array&gt;
    &lt;/dict&gt;
    &lt;/plist&gt;
    "
  menuItems
  res: null
  dialog: process.createChildProcess dialog_cmd, ["-u"]
  dialog.addListener "exit", (code) -&gt;
    dialog.close()
  dialog.addListener "output", (data) -&gt;
    res: data.strip()
  dialog.write menuItems
  res

p menu ['Option 1', null, 'Option 2', 'Options 3']
# p menu [{title: 'Option 1'}, {separator: 1}, {title: 'Option 2'}]

# Original Ruby TextMate::UI.menu helper:
#
# # pop up a menu on screen
# def menu(options)
#   return nil if options.empty?
# 
#   return_hash = true
#   if options[0].kind_of?(String)
#     return_hash = false
#     options = options.collect { |e| e == nil ? { 'separator' =&gt; 1 } : { 'title' =&gt; e } }
#   end
# 
#   res = ::IO.popen("#{TM_DIALOG} -u", "r+") do |io|
#     Thread.new do
#       plist = { 'menuItems' =&gt; options }.to_plist
#       io.write plist; io.close_write
#     end
#     OSX::PropertyList::load(io)
#   end
# 
#   return nil unless res.has_key? 'selectedIndex'
#   index = res['selectedIndex'].to_i
# 
#   return return_hash ? options[index] : index
# end
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>~$</string>
	<key>name</key>
	<string>Show menu (demo)</string>
	<key>output</key>
	<string>afterSelectedText</string>
	<key>scope</key>
	<string>source.coffee</string>
	<key>uuid</key>
	<string>A78C3E6B-9E5E-43DA-853C-1E50DED86C40</string>
</dict>
</plist>
